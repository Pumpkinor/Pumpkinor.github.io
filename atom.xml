<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pumpkinor</title>
  <subtitle>Learning and Coding</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pumpkinor.github.io/"/>
  <updated>2017-08-20T14:16:00.402Z</updated>
  <id>https://pumpkinor.github.io/</id>
  
  <author>
    <name>Pumpkinor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>挖掘机技术哪家强</title>
    <link href="https://pumpkinor.github.io/2017/08/20/%E6%8C%96%E6%8E%98%E6%9C%BA%E6%8A%80%E6%9C%AF%E5%93%AA%E5%AE%B6%E5%BC%BA/"/>
    <id>https://pumpkinor.github.io/2017/08/20/挖掘机技术哪家强/</id>
    <published>2017-08-20T13:52:20.000Z</published>
    <updated>2017-08-20T14:16:00.402Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>PAT B1032 挖掘机技术哪家强(20)</p>
<p>时间限制<br>200 ms<br>内存限制<br>65536 kB</p>
<p>为了用事实说明挖掘机技术到底哪家强，PAT组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p>
<p>输入格式：</p>
<p>输入在第1行给出不超过10的5次方的正整数N，即参赛人数。随后N行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从1开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。</p>
<p>输出格式：</p>
<p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。 </p>
<p>输入样例：<br>6<br>3 65<br>2 80<br>1 100<br>2 70<br>3 40<br>3 0</p>
<p>输出样例：</p>
<p>2 150</p>
<h4 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h4><p>根据题目描述，我们可以知道输入的参数是参赛选手的学校编号和所得分数，不保证也不排除一个学校只派出一名参赛者，即一所学校的总分是由一名或者多名选手的得分之和组成。求获得总分最高的学校：</p>
<ul>
<li>step 1，建立一个数组school[MAXSIZE]用于存放每个学校的总分，如数组元素school[1]就是编号为1的学校的总分，数组初始值赋为0；</li>
<li>step 2，用SchId表示选手的学校编号，SchCore表示该选手对应的成绩；</li>
<li>step 3，每次输入一个SchId和SchCore，在对应数组位school[SchId]上加上SchCore；</li>
<li>step 4，在输入完所有的选手学校编号和得分信息之后，school数组中存放的就是每个学校最后的总分了，当然，由于学校编号是从1开始的school[0]存放的数据是初始值0，没有意义；</li>
<li>step 5，遍历school数组，找出其中最大的元素赋值给maxCore和对应的数组下标即学校编号赋值给num然后打印输出。</li>
</ul>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">100010</span>;</div><div class="line"><span class="keyword">int</span> school[MAXSIZE] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> n,num = <span class="number">0</span>,maxCore = <span class="number">0</span>;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="keyword">int</span> SchId,SchCore;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;			<span class="comment">//i从0到n-1，一共输入n个参赛者信息 </span></div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;SchId,&amp;SchCore);</div><div class="line">		school[SchId] += SchCore;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;			</div><div class="line">    <span class="comment">//学校编号SchId是从1开始的，n个参赛者最多可能来自n个学校，需要比较的学校编号应该是1到n </span></div><div class="line">		<span class="keyword">if</span>(school[i] &gt;= maxCore)&#123;</div><div class="line">			num = i;</div><div class="line">			maxCore = school[num];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d"</span>,num,maxCore);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h4&gt;&lt;p&gt;PAT B103
    
    </summary>
    
      <category term="PAT B level" scheme="https://pumpkinor.github.io/categories/PAT-B-level/"/>
    
    
  </entry>
  
  <entry>
    <title>害死人不偿命的(3n+1)猜想</title>
    <link href="https://pumpkinor.github.io/2017/08/20/%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3/"/>
    <id>https://pumpkinor.github.io/2017/08/20/害死人不偿命的-3n-1-猜想/</id>
    <published>2017-08-20T10:01:39.000Z</published>
    <updated>2017-08-20T10:17:23.258Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>PAT B1001 害死人不偿命的(3n+1)猜想 (15)</p>
<p>时间限制<br>400 ms<br>内存限制<br>65536 kB</p>
<p>卡拉兹(Callatz)猜想：</p>
<p>对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证3n+1，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>
<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？</p>
<p>输入格式：</p>
<p>每个测试输入包含1个测试用例，即给出自然数n的值。</p>
<p>输出格式：</p>
<p>输出从n计算到1需要的步数。</p>
<p>输入样例：<br>3</p>
<p>输出样例：</p>
<p>5</p>
<h4 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h4><p>这是个简单的题目，只要根据题目描述，一步一步将描述信息转化为代码实现即可。</p>
<ul>
<li>step 1，输入一个自然数n；</li>
<li>step 2，判断自然数n是奇数还是偶数；</li>
<li>step 3，对判断为偶数的情况进行除以2操作；</li>
<li>step 4，对判断为基数的情况下进行(3*n+1)/2操作；</li>
<li>step 5，不断重复step 3和step 4，直到n等于1为止；</li>
<li>step 6，打印用于统计次数的变量。</li>
</ul>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> n,step=<span class="number">0</span>;</div><div class="line">	<span class="comment">//step用于统计操作次数</span></div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="keyword">while</span>(n!=<span class="number">1</span>)	</div><div class="line">	&#123;</div><div class="line">      <span class="comment">//当n不为1时执行循环</span></div><div class="line">		<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">			n=n/<span class="number">2</span>;</div><div class="line">      <span class="comment">//n为偶数的情况</span></div><div class="line">		<span class="keyword">else</span></div><div class="line">			n=(<span class="number">3</span>*n+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">      <span class="comment">//n为基数的情况</span></div><div class="line">		step++;</div><div class="line">      <span class="comment">//每执行一次操作step加1</span></div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,step);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h4&gt;&lt;p&gt;PAT B100
    
    </summary>
    
      <category term="PAT B level" scheme="https://pumpkinor.github.io/categories/PAT-B-level/"/>
    
    
  </entry>
  
  <entry>
    <title>《算法笔记及上机实战指南》学习笔记</title>
    <link href="https://pumpkinor.github.io/2017/08/20/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E5%8F%8A%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://pumpkinor.github.io/2017/08/20/《算法笔记及上机实战指南》学习笔记/</id>
    <published>2017-08-20T09:04:31.000Z</published>
    <updated>2017-08-20T14:16:28.200Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近在跟着胡凡的《算法笔记》和配套的《上机训练实战指南》学习基本的算法。就是这两本。</p>
<p><img src="http://ou3525a1l.bkt.clouddn.com/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E5%B0%81%E9%9D%A2.jpg" alt="算法笔记"></p>
<p><img src="http://ou3525a1l.bkt.clouddn.com/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E5%AE%9E%E6%88%98%E8%AE%AD%E7%BB%83%E5%B0%81%E9%9D%A2.jpg" alt="上机实战训练指南"></p>
<p>在这里记录一下学习之中的一些心得和一些题目的解题思路，不保证最优，欢迎指正，权当备忘，因为这个博客也并没有加入百度或者谷歌的SEO，这意味着，它不会被你在搜索引擎中搜索到，唯二能够访问这个博客的可能只是从我本人这里获取地址或者从我的<a href="https://github.com/Pumpkinor/" target="_blank" rel="external">Github</a>主页上链接过来。</p>
<h4 id="第二章-C-C-快速入门"><a href="#第二章-C-C-快速入门" class="headerlink" title="第二章  C/C++ 快速入门"></a>第二章  C/C++ 快速入门</h4><p>这一章是对于基础的C/C++语言语法进行简略的介绍，不作为系统性的C/C++语言学习使用，只讲述与算法竞赛，在线oj相关的语法。侧重于C语言，因为C++语法在机考中多数是用不到的。</p>
<ol>
<li>变量类型</li>
<li>关于数据的输入输出</li>
<li>用typedef给数据类型起别名</li>
<li>常用math.h函数</li>
<li>选择结构</li>
<li>循环结构</li>
<li>数组</li>
<li>常用string.h函数</li>
<li>自定义函数</li>
<li>函数递归</li>
<li>指针和引用</li>
<li>结构体</li>
<li>浮点数比较</li>
<li>在线oj的几种测试模式</li>
</ol>
<h4 id="第三章-入门模拟"><a href="#第三章-入门模拟" class="headerlink" title="第三章  入门模拟"></a>第三章  入门模拟</h4><p>这一章主要讲解一些简单的模拟类编程题，没有涉及复杂算法，只要“题目怎么说，你就怎么做”一般都是能够顺利做出来的，主要考察和训练个人的代码能力，对于基础代码能力的提高很有帮助。</p>
<p>下面给出例题和课后题的个人思考和分析，仅供参考使用。</p>
<h5 id="3-1-简单模拟："><a href="#3-1-简单模拟：" class="headerlink" title="3.1 简单模拟："></a>3.1 简单模拟：</h5><ol>
<li><a href="https://pumpkinor.github.io/2017/08/20/%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3/">PAT B1001 害死人不偿命的(3n+1)猜想</a></li>
<li><a href="https://pumpkinor.github.io/2017/08/20/%E6%8C%96%E6%8E%98%E6%9C%BA%E6%8A%80%E6%9C%AF%E5%93%AA%E5%AE%B6%E5%BC%BA/">PAT B1032 挖掘机技术哪家强</a></li>
</ol>
<h5 id="3-2-查找元素："><a href="#3-2-查找元素：" class="headerlink" title="3.2 查找元素："></a>3.2 查找元素：</h5><ol>
<li><a href="">CodeUp 1934 找x</a></li>
</ol>
<h5 id="3-3-图形输出"><a href="#3-3-图形输出" class="headerlink" title="3.3 图形输出:"></a>3.3 图形输出:</h5><ol>
<li><a href="">PAT B1036 跟奥巴马一起编程</a></li>
</ol>
<h5 id="3-4-日期处理"><a href="#3-4-日期处理" class="headerlink" title="3.4 日期处理:"></a>3.4 日期处理:</h5><ol>
<li><a href="">CodeUp 1928 日期差值</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;最近在跟着胡凡的《算法笔记》和配套的《上机训练实战指南》学习基本的算法。就是这两本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ou3525a1l.bkt.cloudd
    
    </summary>
    
      <category term="Algorithm Note" scheme="https://pumpkinor.github.io/categories/Algorithm-Note/"/>
    
    
      <category term="Note" scheme="https://pumpkinor.github.io/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>在Github和Coding上用Hexo部署自己的静态博客</title>
    <link href="https://pumpkinor.github.io/2017/08/03/%E5%9C%A8Github%E5%92%8CCoding%E4%B8%8A%E7%94%A8Hexo%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>https://pumpkinor.github.io/2017/08/03/在Github和Coding上用Hexo部署自己的静态博客/</id>
    <published>2017-08-03T00:55:00.000Z</published>
    <updated>2017-08-03T01:26:07.539Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>​    现在你所访问的这个博客就是基于Github和Coding（国内访问稳定）的静态页面服务利用Hexo框架所假设的博客。</p>
<p>​    如果你目的明确，只是为了在短时间内搭建一个博客网站，<a href="https://portablehexo.bitmoe.cn/" target="_blank" rel="external">Hexo Portable</a>很适合你。        <img src="http://ou3525a1l.bkt.clouddn.com/hexo%20portable.png" alt="Hexo Portable"></p>
<p><img src="http://ou3525a1l.bkt.clouddn.com/hexo%20portable2.png" alt="Hexo Portable2"></p>
<p>​    如果你只是漫漫长夜百无聊赖，请看下面的完整版本。</p>
<p>​    Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。下面，来具体介绍一下相关的配置和使用，以windows系统为例：</p>
<p>​    step1：首先，我们需要在电脑上下载并安装<a href="http://nodejs.cn/download/" target="_blank" rel="external">Node.js</a>和<a href="https://git-scm.com/download/win" target="_blank" rel="external">Git Bash</a>（点击链接跳转下载页面）两个软件，无需改动任何设置，默认安装即可。</p>
<p>​    step2：在电脑中新建一个文件夹用于架设博客，Hexo框架和你今后所写的博文还有编译以后的静态页面都会存放在这个文件夹里。</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;​    现在你所访问的这个博客就是基于Github和Coding（国内访问稳定）的静态页面服务利用Hexo框架所假设的博客。&lt;/p&gt;
&lt;p&gt;​    如果你目的明确，只是为
    
    </summary>
    
      <category term="Configuration Tutorial" scheme="https://pumpkinor.github.io/categories/Configuration-Tutorial/"/>
    
    
  </entry>
  
  <entry>
    <title>Some Classical Sorting Methods </title>
    <link href="https://pumpkinor.github.io/2017/07/29/Some-Classical-Sorting-Methods-3/"/>
    <id>https://pumpkinor.github.io/2017/07/29/Some-Classical-Sorting-Methods-3/</id>
    <published>2017-07-29T03:00:00.000Z</published>
    <updated>2017-07-30T14:14:01.110Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><ol>
<li><p>冒泡排序</p>
<p>冒泡排序的实质在于交换，即多次通过比较数组相邻元素，把其中最大的一个元素移动到最右边的位置放置不管，再在剩余元素中进行同样的操作，直到剩余元素为0为止。</p>
<p>具体比较方式如下：</p>
<p>从a[0]与a[1]比较到a[n-2]与a[n-1]并将二者之间较大的元素放到右边位置，这样一次操作称之为一轮冒泡，此时数组最右边元素a[n-1]就是整个数组元素中最大的那一个。</p>
<p>第2轮则是从a[0]与a[1]比较到a[n-3]与a[n-2]并将二者之间较大的元素放到右边位置，由于已知a[n-1]是整个数组元素中最大的那一个，故不需要再重复比较a[n-2]和a[n-1]的大小，此时数组元素a[n-2]就是整个数组元素中第二大的那一个。</p>
<p>第3轮则是从a[0]与a[1]比较到a[n-4]与a[n-3]并将二者之间较大的元素放到右边位置。</p>
<p>……</p>
<p>依此类推。</p>
<p>第n-2轮则是从a[0]与a[1]比较到a[1]与a[2]。</p>
<p>第n-1轮则仅比较且交换a[0]与a[1]，至此，冒泡结束。数组已经完成了从小到大的排序。</p>
<p>例如：    对a[5]={6,5,2,1,3}进行冒泡排序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">第1轮：</div><div class="line">	1.a[0]和a[1]进行比较并交换			a[5]=&#123;5,6,2,1,3&#125;</div><div class="line">	2.a[1]和a[2]进行比较并交换			a[5]=&#123;5,2,6,1,3&#125;</div><div class="line">	3.a[2]和a[3]进行比较并交换			a[5]=&#123;5,2,1,6,3&#125;</div><div class="line">	4.a[3]和a[4]进行比较并交换			a[5]=&#123;5,2,1,3,6&#125;</div><div class="line">第2轮：</div><div class="line">	1.a[0]和a[1]进行比较并交换			a[5]=&#123;2,5,1,3,6&#125;</div><div class="line">	2.a[1]和a[2]进行比较并交换			a[5]=&#123;2,1,5,3,6&#125;</div><div class="line">	3.a[2]和a[3]进行比较并交换			a[5]=&#123;2,1,3,5,6&#125;</div><div class="line">第3轮：</div><div class="line">	1.a[0]和a[1]进行比较并交换			a[5]=&#123;1,2,3,5,6&#125;</div><div class="line">	2.a[1]和a[2]进行比较并交换			a[5]=&#123;1,2,3,5,6&#125;</div><div class="line">第4轮：</div><div class="line">	1.a[0]和a[1]进行比较并交换			a[5]=&#123;1,2,3,5,6&#125;</div></pre></td></tr></table></figure>
<p>C语言实现代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125; ;</div><div class="line">	<span class="comment">//i表示排序进行轮数，一共需进行n-1轮冒泡排序 </span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)&#123;</div><div class="line">		<span class="comment">//第i轮排序时，从a[0]到a[n-1-i]都与他们的下一个元素进行比较</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>-i; j++)&#123;</div><div class="line">			<span class="comment">//若a[j]&gt;a[j+1]则进行交换元素 否则则保持不变 </span></div><div class="line">			<span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</div><div class="line">				<span class="keyword">int</span> temp = a[j];</div><div class="line">				a[j] = a[j+<span class="number">1</span>];</div><div class="line">				a[j+<span class="number">1</span>] = temp;</div><div class="line">			&#125; </div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>快速排序</p>
</li>
<li><p>插入排序</p>
</li>
<li><p>选择排序</p>
</li>
<li><p>希尔排序</p>
</li>
<li><p>堆排序</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;冒泡排序&lt;/p&gt;
&lt;p&gt;冒泡排序的实质在于交换，即多次通过比较数组相邻元素，把其中最大的一个元素移动到最右边的位置放置不管，再在剩余元素中进行同样的操作，直
    
    </summary>
    
      <category term="Algorithm" scheme="https://pumpkinor.github.io/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://pumpkinor.github.io/2017/07/28/hello-world/"/>
    <id>https://pumpkinor.github.io/2017/07/28/hello-world/</id>
    <published>2017-07-28T15:43:16.893Z</published>
    <updated>2017-07-29T06:15:11.750Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is 
    
    </summary>
    
      <category term="others" scheme="https://pumpkinor.github.io/categories/others/"/>
    
    
  </entry>
  
</feed>
