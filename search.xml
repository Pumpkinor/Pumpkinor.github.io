<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Note-A0001-关于斐波那契数列的几种解法对比的思考</title>
      <link href="/2018/05/27/Note-A0001-%E5%85%B3%E4%BA%8E%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E5%87%A0%E7%A7%8D%E8%A7%A3%E6%B3%95%E5%AF%B9%E6%AF%94%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2018/05/27/Note-A0001-%E5%85%B3%E4%BA%8E%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E7%9A%84%E5%87%A0%E7%A7%8D%E8%A7%A3%E6%B3%95%E5%AF%B9%E6%AF%94%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>​    斐波那契的问题应该是每个人都听说过的，它在中学数学课本以及某些C语言教材中曾以兔子问题的形式出现过，它的发明者是意大利数学家列昂纳多·斐波那契（Leonardo Fibonacci，1170—1250）。1202 年，他撰写了《Liber Abaci》一书，该书是一部较全面的初等数学著作。兔子问题的具体描述如下：</p><p>​    假设第 1 个月有1 对刚诞生的兔子，第2 个月进入成熟期，第3 个月开始生育兔子，而1 对成熟的兔子每月会生1 对兔子，兔子永不死去……那么，由1 对初生兔子开始，12 个月后会有多少对兔子呢？</p><p>​    从兔子数列抽象出来的斐波那契数列如下：<br>​                            1，1，2，3，5，8，13，21，34，…</p><p>​    对上述的斐波拉契数列进行分析，可以得到这样的一个递推式：</p><p>$$<br>\begin{equation}<br>f(n)=\begin{cases}1&amp;n=1\\1&amp;n=2\\f(n-1)+f(n-2)&amp;n&gt;2\end{cases}<br>\end{equation}<br>$$<br>​    下面介绍几种代码解决思路：</p><h4 id="使用通项"><a href="#使用通项" class="headerlink" title="使用通项"></a>使用通项</h4><p>​    直接使用通项公式求解每一项的值是常规的数组元素求解办法。斐波拉契数列的通项公式可以通过列解数列的特征方程来进行求解，当n&gt;2的时候可以得到这样的一个特征方程：$x^2-x-1=0$，对这个特征方程进行求解，可以得到：$x_1=\frac{1-\sqrt{5}}{2}$ , $x_2=\frac{1+\sqrt{5}}{2}$ 。代入原递推式，有$f(n)=Ax_1^n+Bx_2^n$ ，又由于f(1)=f(2)=1,可以列方程组<br>$$<br>\begin{equation}<br>\begin{cases}Ax_1+Bx_2=1\\Ax_1^2+Bx_2^2=1\end{cases}<br>\end{equation}<br>$$<br>求解出$A=\frac{1}{\sqrt{5}}$ , $B=- \frac{1}{\sqrt{5}}$即斐波拉契的通项公式是：$f(n)=- \frac{1}{\sqrt{5}}x_1^n + \frac{1}{\sqrt{5}}x_2^n$ ，当n趋向于无穷的时候，通项公式可以近似等于为：$f(n)= \frac{1}{\sqrt{5}}x_2^n$ 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="comment">//直接使用通项公式</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fib1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">  <span class="keyword">double</span> sum = <span class="number">0.0</span>;</div><div class="line">sum = (<span class="number">1</span> / <span class="built_in">sqrt</span>(<span class="number">5</span>)) * (<span class="built_in">pow</span>(((<span class="number">1</span> + <span class="built_in">sqrt</span>(<span class="number">5</span>)) / <span class="number">2</span>),n) - <span class="built_in">pow</span>(((<span class="number">1</span> - <span class="built_in">sqrt</span>(<span class="number">5</span>)) / <span class="number">2</span>),n));</div><div class="line"><span class="keyword">return</span> (<span class="keyword">int</span>)sum;</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用近似的通项公式，只测试了前面几个数据就是咯</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fib2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line"><span class="keyword">double</span> dsum = <span class="number">0.0</span>;</div><div class="line"><span class="keyword">int</span> isum = <span class="number">0</span>;</div><div class="line">dsum = (<span class="number">1</span> / <span class="built_in">sqrt</span>(<span class="number">5</span>)) * <span class="built_in">pow</span>(((<span class="number">1</span> + <span class="built_in">sqrt</span>(<span class="number">5</span>)) / <span class="number">2</span>),n);</div><div class="line"><span class="comment">//+0.5强制类型转换实现一个简单的四舍五入</span></div><div class="line">isum = (<span class="keyword">int</span>)(dsum + <span class="number">0.5</span>);</div><div class="line"><span class="keyword">return</span> isum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> sum1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> sum2 = <span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    sum1 = Fib1(n);</div><div class="line">    sum2 = Fib2(n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>,sum1,sum2);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="使用递归"><a href="#使用递归" class="headerlink" title="使用递归"></a>使用递归</h4><p>​    针对上面的递推式，我们也可以很容易就会想到使用递归的方法来编写程序代码来解决兔子问题，记忆里面当初接触的C语言教材上面也是拿它来讲解递归这个知识点的。递归的代码也很好写，基本如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fib1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n &gt; <span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> Fib1(n - <span class="number">1</span>) + Fib1(n - <span class="number">2</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    sum = Fib1(n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​    嗯，分析一下上面代码的时间和空间复杂度。当然，使用通项公式的求解方法的时间复杂度和空间复杂度都是1，这当然是效率最高的代码，但是其通项公式的求解需要较高的数学计算能力。</p><p>​    递归法的时间复杂度的话，当n=1和n=2的时候，都是直接返回1，故时间复杂度T(1)=T(2)=1；当n&gt;2的时候，时间复杂度是T(n)=T(n-1)+T(n-2)+1；故总的来说时间复杂度就是：</p><p>​<br>$$<br>\begin{equation}<br>T(n)=\begin{cases}1&amp;n=1\\1&amp;n=2\\T(n-1)+T(n-2)&amp;n&gt;2\end{cases}<br>\end{equation}<br>$$<br>​    比较公式（2）和公式（2）可以发现在n&gt;2的时候T(n)总是大于或者等于f(n)的，而$f(n)= \frac{1}{\sqrt{5}}x_2^n$ ，故递归法为一个指数阶的算法。</p><p>​    递归法的空间复杂度的话，由于递归栈的使用，空间复杂度可以简单的看出来是O(n)级别。</p><h4 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h4><p>​    斐波那契数列中的每一项是前两项之和，如果记录前两项的值，只需要一次加法运算就可以得到当前项</p><h4 id="使用迭代"><a href="#使用迭代" class="headerlink" title="使用迭代"></a>使用迭代</h4><p>​    </p>]]></content>
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>线性表的顺序存储结构实现</title>
      <link href="/2017/10/06/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/10/06/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100        <span class="comment">/*顺序表允许的最大空间量*/</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></div><div class="line"><span class="class">&#123;</span></div><div class="line">ElemTypeelem[MAXSIZE];  <span class="comment">/* ElemType为抽象数据类型*/</span></div><div class="line">   <span class="keyword">int</span>length;                 <span class="comment">/*当前顺序表长度*/</span></div><div class="line">&#125; SqList;</div></pre></td></tr></table></figure><h3 id="顺序表的基本操作"><a href="#顺序表的基本操作" class="headerlink" title="顺序表的基本操作"></a>顺序表的基本操作</h3><ol><li>初始化操作：为顺序表分配一个预定义大小的数组空间，并将线性表的当前长度length设为0。</li><li>销毁操作：将顺序表所占用的空间释放</li><li>判空操作：判断线性表是否为空表，是返回真，否返回假</li><li>清空操作：将顺序表的长度设为0，是表为空表</li><li>求表长操作：返回线性表中元素个数</li><li>取元素操作：用给定变量e返回线性表中的第i个元素</li><li>定位操作：根据给定的数据元素e，在顺序表中找出和e相等的数据元素的位序，如果这样的数据元素不存在，则返回0</li><li>插入操作(顺序存储结构一般用尾插法)：在顺序表的第i个数据元素前插入一个新的数据元素e，注意，在插入前必须判断i的值域 ，而在插入操作后必须使顺序表的长度增1.</li><li>删除操作：删除顺序表中第i个数据元素，并且用e返回其值。注意，在删除操作前必须判断i的值域 ，而在删除操作后必须使顺序表的长度减1。</li><li>输出操作：即将顺序表中各个元素按下标次序输出。</li></ol><h3 id="顺序表的其他操作"><a href="#顺序表的其他操作" class="headerlink" title="顺序表的其他操作"></a>顺序表的其他操作</h3><ol><li>删除线性表中的所有值等于x的元素</li><li>以第一个元素为基准将小于等于它的元素放到它的前面，大于它的元素放到它的后面</li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*****************************************</span></div><div class="line"><span class="comment">Description:线性表的顺序存储结构</span></div><div class="line"><span class="comment">Copyright: Doux</span></div><div class="line"><span class="comment">Author: Pumpkinor</span></div><div class="line"><span class="comment">Date: 2016/12/25</span></div><div class="line"><span class="comment">Email: pumpkinor@163.com</span></div><div class="line"><span class="comment">*****************************************/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100<span class="comment">//定义顺序表的最大长度为100</span></span></div><div class="line"></div><div class="line"><span class="comment">/*********线性表的顺序存储结构*********/</span></div><div class="line"><span class="keyword">typedef</span><span class="keyword">char</span> ElemType;<span class="comment">//定义顺序表元素类型为char</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></div><div class="line">ElemType elem[MAXSIZE]; <span class="comment">//ElemType为抽象数据类型</span></div><div class="line"><span class="keyword">int</span> length;         <span class="comment">//当前顺序表长度</span></div><div class="line">&#125;SqList;<span class="comment">//定义顺序表结构体</span></div><div class="line"></div><div class="line"><span class="comment">//*********基本操作的函数原型说明*********/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList *&amp;L)</span></span>;</div><div class="line"><span class="comment">//1.初始化线性表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destroy</span><span class="params">(SqList *L)</span></span>;</div><div class="line"><span class="comment">//2.销毁线性表</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListEmpty</span><span class="params">(SqList *L)</span></span>;</div><div class="line"><span class="comment">//3.判断线性表是否为空</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">(SqList *&amp;L)</span></span>;</div><div class="line"><span class="comment">//4.清空线性表</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(SqList *L)</span></span>;</div><div class="line"><span class="comment">//5.求表长，返回L中元素个数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList</span><span class="params">(SqList *L)</span></span>;</div><div class="line"><span class="comment">//6.输出表，若表为非空，输出L中所有元素的值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(SqList *L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>;</div><div class="line"><span class="comment">//7.取表中元素，用e返回表中第i个元素的值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(SqList *L,ElemType e)</span></span>;</div><div class="line"><span class="comment">//8.定位表中元素，返回表中第一个与e相等的元素位序</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListInsert</span><span class="params">(SqList *&amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>;</div><div class="line"><span class="comment">//9.插入元素，在L的第i个位置插入e的值，L长度增加1</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListDelete</span><span class="params">(SqList *&amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>;</div><div class="line"><span class="comment">//10.删除元素，将L中第i个元素删除，用e返回其值，L长度减少1</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delnode1</span><span class="params">(SqList *&amp;L,ElemType x)</span></span>;</div><div class="line"><span class="comment">//11.删除线性表中所有等于x的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delnode2</span><span class="params">(SqList *&amp;L,ElemType x)</span></span>;</div><div class="line"><span class="comment">//12.删除线性表中所有等于x的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">move1</span><span class="params">(SqList *&amp;L)</span></span>;</div><div class="line"><span class="comment">//13.以第一个元素为基准将小于等于它的元素放到它前面，大于它的元素放到它的后面</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">move2</span><span class="params">(SqList *&amp;L)</span></span>;</div><div class="line"><span class="comment">//14.以第一个元素为基准将小于等于它的元素放到它前面，大于它的元素放到它的后面</span></div><div class="line"></div><div class="line"><span class="comment">/*********主函数*********/</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">SqList *L;</div><div class="line">ElemType e;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(1)初始化顺序表L\n"</span>);</div><div class="line">InitList(L);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(2)依次采用尾插法插入a,b,c,d,e元素\n"</span>);</div><div class="line">ListInsert(L,<span class="number">1</span>,<span class="string">'a'</span>);</div><div class="line">ListInsert(L,<span class="number">2</span>,<span class="string">'b'</span>);</div><div class="line">ListInsert(L,<span class="number">3</span>,<span class="string">'c'</span>);</div><div class="line">ListInsert(L,<span class="number">4</span>,<span class="string">'d'</span>);</div><div class="line">ListInsert(L,<span class="number">5</span>,<span class="string">'e'</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(3)输出顺序表L: "</span>);</div><div class="line">DispList(L);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(4)顺序表L长度: %d\n"</span>,ListLength(L));</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(5)顺序表L为%s\n"</span>,(ListEmpty(L)?<span class="string">"空"</span>:<span class="string">"非空"</span>));</div><div class="line">GetElem(L,<span class="number">3</span>,e);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(6)顺序表L的第3个元素: %c\n"</span>,e);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(7)元素a的位置: %d\n"</span>,LocateElem(L,<span class="string">'a'</span>));</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(8)在第4个元素位置上插入f元素\n"</span>);</div><div class="line">ListInsert(L,<span class="number">4</span>,<span class="string">'f'</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(9)输出顺序表L: "</span>);</div><div class="line">DispList(L);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(10)删除L的第3个元素\n"</span>);</div><div class="line">    ListDelete(L,<span class="number">3</span>,e);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(11)输出顺序表L: "</span>);</div><div class="line">DispList(L);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(12)清空顺序表L\n"</span>);</div><div class="line">ClearList(L);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(13)顺序表L为%s\n"</span>,(ListEmpty(L)?<span class="string">"空"</span>:<span class="string">"非空"</span>));</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(14)依次采用尾插法插入d,c,e,f,a,b,c,b,e,f,a,b,c,b,e等15个元素\n"</span>);</div><div class="line">ListInsert(L,<span class="number">1</span>,<span class="string">'d'</span>);</div><div class="line">ListInsert(L,<span class="number">2</span>,<span class="string">'c'</span>);</div><div class="line">ListInsert(L,<span class="number">3</span>,<span class="string">'e'</span>);</div><div class="line">ListInsert(L,<span class="number">4</span>,<span class="string">'f'</span>);</div><div class="line">ListInsert(L,<span class="number">5</span>,<span class="string">'a'</span>);</div><div class="line">ListInsert(L,<span class="number">6</span>,<span class="string">'b'</span>);</div><div class="line">ListInsert(L,<span class="number">7</span>,<span class="string">'c'</span>);</div><div class="line">ListInsert(L,<span class="number">8</span>,<span class="string">'b'</span>);</div><div class="line">ListInsert(L,<span class="number">9</span>,<span class="string">'e'</span>);</div><div class="line">ListInsert(L,<span class="number">10</span>,<span class="string">'f'</span>);</div><div class="line">ListInsert(L,<span class="number">11</span>,<span class="string">'a'</span>);</div><div class="line">ListInsert(L,<span class="number">12</span>,<span class="string">'b'</span>);</div><div class="line">ListInsert(L,<span class="number">13</span>,<span class="string">'c'</span>);</div><div class="line">ListInsert(L,<span class="number">14</span>,<span class="string">'b'</span>);</div><div class="line">ListInsert(L,<span class="number">15</span>,<span class="string">'e'</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(15)删除顺序表L中的所有f\n"</span>);</div><div class="line">delnode1(L,<span class="string">'f'</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(16)输出顺序表L: "</span>);</div><div class="line">DispList(L);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(17)删除顺序表L中的所有a\n"</span>);</div><div class="line">delnode2(L,<span class="string">'a'</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(18)输出顺序表L: "</span>);</div><div class="line">DispList(L);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(19)取顺序表第一个元素: "</span>);</div><div class="line">GetElem(L,<span class="number">1</span>,e);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,e);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(20)以第一个元素为基准将小于等于它的元素放到它的前面，大于它的元素放到它的后面\n"</span>);</div><div class="line">move1(L);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(21)输出顺序表L: "</span>);</div><div class="line">DispList(L);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(22)取顺序表第一个元素: "</span>);</div><div class="line">GetElem(L,<span class="number">1</span>,e);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,e);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(23)以第一个元素为基准将小于等于它的元素放到它的前面，大于它的元素放到它的后面\n"</span>);</div><div class="line">move2(L);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(24)输出顺序表L: "</span>);</div><div class="line">DispList(L);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"(25)释放顺序表L\n"</span>);</div><div class="line">Destroy(L);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*********基本操作的函数算法描述*********/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList *&amp;L)</span><span class="comment">//初始化线性表</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">L = (SqList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqList));</div><div class="line">L-&gt;length=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destroy</span><span class="params">(SqList *L)</span><span class="comment">//销毁线性表</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">free</span>(L);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListEmpty</span><span class="params">(SqList *L)</span><span class="comment">//判断线性表是否为空</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">return</span>(L-&gt;length==<span class="number">0</span>);<span class="comment">//如果顺序表长度为0 则返回1 如果不为空 则返回0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">(SqList *&amp;L)</span><span class="comment">//清空线性表</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">L-&gt;length = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(SqList *L)</span><span class="comment">//求表长，返回L中元素个数</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">return</span>(L-&gt;length);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList</span><span class="params">(SqList *L)</span><span class="comment">//输出表，若表为非空，输出L中所有元素的值</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">if</span>(ListEmpty(L))<span class="comment">//如果顺序表长度为0即为空表ListEmpty()的返回值就是1</span></div><div class="line"><span class="keyword">return</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L-&gt;length;i++)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,L-&gt;elem[i]);</div><div class="line">  <span class="comment">//顺序表实质还是用数组存储数据，这里还是按照数组下标进行操作</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(SqList *L,<span class="keyword">int</span> i,ElemType &amp;e)</span><span class="comment">//取表中元素，用e返回表中第i个元素的值</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;length)</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">e=L-&gt;elem[i<span class="number">-1</span>];</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(SqList *L,ElemType e)</span><span class="comment">//定位表中元素，返回表中第一个与e相等的元素位序</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&lt;L-&gt;length&amp;&amp;L-&gt;elem[i]!=e)</div><div class="line">i++;</div><div class="line"><span class="keyword">if</span>(i&gt;=L-&gt;length)</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListInsert</span><span class="params">(SqList *&amp;L,<span class="keyword">int</span> i,ElemType e)</span></span></div><div class="line"><span class="function"><span class="comment">//插入元素，在L的第i个位置插入e的值，L长度增加1</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> j;</div><div class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;length+<span class="number">1</span>)</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">i--;<span class="comment">//将位序i转化为数组下标</span></div><div class="line"><span class="keyword">for</span>(j=L-&gt;length;j&gt;i;j--)</div><div class="line">L-&gt;elem[j]=L-&gt;elem[j<span class="number">-1</span>];</div><div class="line">L-&gt;elem[i]=e;</div><div class="line">L-&gt;length++;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListDelete</span><span class="params">(SqList *&amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span></div><div class="line"><span class="function"><span class="comment">//删除元素，将L中第i个元素删除，用e返回其值，L长度减少1</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> j;</div><div class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;length)</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">i--;<span class="comment">//将位序i转化为数组下标</span></div><div class="line">e=L-&gt;elem[i];</div><div class="line"><span class="keyword">for</span>(j=i;j&lt;L-&gt;length<span class="number">-1</span>;j++)</div><div class="line">L-&gt;elem[j]=L-&gt;elem[j+<span class="number">1</span>];</div><div class="line">L-&gt;length--;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delnode1</span><span class="params">(SqList *&amp;L,ElemType x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> k = <span class="number">0</span>,i;<span class="comment">//k用于记录不为x的元素个数</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; L-&gt;length;i++)&#123;<span class="comment">//从数组下标0开始扫描顺序表</span></div><div class="line"><span class="keyword">if</span>(L-&gt;elem[i] != x)&#123;<span class="comment">//若当前元素不等于x，将其插入L中</span></div><div class="line">L-&gt;elem[k] = L-&gt;elem[i];</div><div class="line">k++;<span class="comment">//不等于x的元素数目+1</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">L-&gt;length = k;<span class="comment">//顺序表长度等于k</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delnode2</span><span class="params">(SqList *&amp;L,ElemType x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> k = <span class="number">0</span>,i = <span class="number">0</span>;<span class="comment">//k用于记录等于x的元素个数</span></div><div class="line"><span class="keyword">while</span>(i &lt; L-&gt;length)&#123;</div><div class="line"><span class="keyword">if</span>(L-&gt;elem[i] == x)&#123;</div><div class="line">k++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">L-&gt;elem[i - k] = L-&gt;elem[i];<span class="comment">//将不为x的元素前移k个位置</span></div><div class="line">&#125;</div><div class="line">i++;</div><div class="line"></div><div class="line">&#125;</div><div class="line">L-&gt;length -= k;<span class="comment">//顺序表长度等于k</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">move1</span><span class="params">(SqList *&amp;L)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>,j = L-&gt;length - <span class="number">1</span>;</div><div class="line">ElemType tmp;<span class="comment">//tmp作为临时变量用于i,j交换的中间变量</span></div><div class="line">ElemType pivot = L-&gt;elem[<span class="number">0</span>];<span class="comment">//以elem[0]为基准进行比较</span></div><div class="line"><span class="keyword">while</span>(i &lt; j)&#123;</div><div class="line"><span class="keyword">while</span>(i &lt; j &amp;&amp; L-&gt;elem[j] &gt; pivot)&#123;</div><div class="line">j--;<span class="comment">//从后向前扫描，找到一个&lt;=pivot的元素，暂停扫描</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(i &lt; j &amp;&amp; L-&gt;elem[i] &lt;= pivot)&#123;</div><div class="line">i++;<span class="comment">//从前向后扫描，找到一个&gt;pivot的元素，暂停扫描</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(i &lt; j)&#123;</div><div class="line">tmp = L-&gt;elem[i];</div><div class="line">L-&gt;elem[i] = L-&gt;elem[j];</div><div class="line">L-&gt;elem[j] = tmp;</div><div class="line">&#125;<span class="comment">//交换L-&gt;elem[i]和L-&gt;elem[j]</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//while循环执行到i=j为止</span></div><div class="line"><span class="comment">//执行到这个地方就已经是把大于基准的数都放到了后半边数组</span></div><div class="line"><span class="comment">//小于基准的数都放到了前半边数组里了</span></div><div class="line">tmp = L-&gt;elem[<span class="number">0</span>];</div><div class="line">L-&gt;elem[<span class="number">0</span>] = L-&gt;elem[j];</div><div class="line">L-&gt;elem[j] = tmp;</div><div class="line"><span class="comment">//交换L-&gt;elem[0]和L-&gt;elem[j]</span></div><div class="line"><span class="comment">//此时i = j i和j指向同一个元素</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">move2</span><span class="params">(SqList *&amp;L)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>,j = L-&gt;length - <span class="number">1</span>;</div><div class="line">ElemType pivot = L-&gt;elem[<span class="number">0</span>];<span class="comment">//把elem[0]作为基准进行放入到pivot中去</span></div><div class="line"><span class="keyword">while</span>(i &lt; j)&#123;</div><div class="line"><span class="comment">//while循环执行到i=j为止</span></div><div class="line"><span class="keyword">while</span>(i &lt; j &amp;&amp; L-&gt;elem[j] &gt; pivot)&#123;</div><div class="line">j--;<span class="comment">//从后向前扫描，找到一个&lt;=pivot的元素，暂停扫描</span></div><div class="line">L-&gt;elem[i] = L-&gt;elem[j];</div><div class="line"><span class="comment">//把这个小于等于基准的元素前移到第i个位置</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(i &lt; j &amp;&amp; L-&gt;elem[i] &lt;= pivot)&#123;</div><div class="line">i++;<span class="comment">//从前向后扫描，找到一个&gt;pivot的元素，暂停扫描</span></div><div class="line">L-&gt;elem[j] = L-&gt;elem[i];</div><div class="line"><span class="comment">//把这个大于基准的元素后移到第j个位置</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">L-&gt;elem[j] = pivot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="运行结果清单"><a href="#运行结果清单" class="headerlink" title="运行结果清单"></a>运行结果清单</h3><p>(1)初始化顺序表L<br>(2)依次采用尾插法插入a,b,c,d,e元素<br>(3)输出顺序表L: abcde<br>(4)顺序表L长度: 5<br>(5)顺序表L为非空<br>(6)顺序表L的第3个元素: c<br>(7)元素a的位置: 1<br>(8)在第4个元素位置上插入f元素<br>(9)输出顺序表L: abcfde<br>(10)删除L的第3个元素<br>(11)输出顺序表L: abfde<br>(12)清空顺序表L<br>(13)顺序表L为空<br>(14)依次采用尾插法插入d,c,e,f,a,b,c,b,e,f,a,b,c,b,e等15个元素<br>(15)删除顺序表L中的所有f<br>(16)输出顺序表L: dceabcbeabcbe<br>(17)删除顺序表L中的所有a<br>(18)输出顺序表L: dcebcbebcbe<br>(19)取顺序表第一个元素: d<br>(20)以第一个元素为基准将小于等于它的元素放到它的前面，大于它的元素放到它的后面<br>(21)输出顺序表L: bcbbcbcdeee<br>(22)取顺序表第一个元素: b<br>(23)以第一个元素为基准将小于等于它的元素放到它的前面，大于它的元素放到它的后面<br>(24)输出顺序表L: bbbbcccdeee<br>(25)释放顺序表L</p>]]></content>
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Codeup-575-A-剩下的树</title>
      <link href="/2017/09/09/Codeup-575-A-%E5%89%A9%E4%B8%8B%E7%9A%84%E6%A0%91/"/>
      <url>/2017/09/09/Codeup-575-A-%E5%89%A9%E4%B8%8B%E7%9A%84%E6%A0%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>Codeup 575 A 剩下的树</p><p>时间限制: 1 Sec  内存限制: 32 MB</p><p>有一个长度为整数L(1&lt;=L&lt;=10000)的马路，可以想象成数轴上长度为L的一个线段，起点是坐标原点，在每个整数坐标点有一棵树，即在0,1,2，…，L共L+1个位置上有L+1棵树。 现在要移走一些树，移走的树的区间用一对数字表示，如 100 200表示移走从100到200之间（包括端点）所有的树。 可能有M(1&lt;=M&lt;=100)个区间，区间之间可能有重叠。现在要求移走所有区间的树之后剩下的树的个数。</p><p>输入</p><p>两个整数L(1&lt;=L&lt;=10000)和M(1&lt;=M&lt;=100)。接下来有M组整数，每组有一对数字。</p><p>输出</p><p>可能有多组输入数据，对于每组输入数据，输出一个数，表示移走所有区间的树之后剩下的树的个数。</p><p>样例输入</p><p>4 21 20 211 21 54 70 0</p><p>样例输出</p><p>25</p><h4 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a><strong>思路分析：</strong></h4><p>简单的模拟思想，用数组a[maxl]存储树木的状态，数组下标表示数轴上的整数坐标点，由题意可知，从0到L+1共有L+1个点，初始在每一点种上树，用数组元素1或者1来表示该坐标上有无树木，1表示该点种有树，0表示该点树被移走。<br>根据题目描述的具体思路就是：</p><ul><li>step 1，设立数组存放各个坐标点处的树木状态，初始化为全部种植有树即数组元素全为1，数组长度要大于10000；</li><li>step 2，输入马路长度L和移走的树木的区间组数M，注意题目中提到的M组区间可能会有重合的情况，用while…break使输入是0 0的时候结束程序运行 ；</li><li>step 3，每次输入一组数据表示移走的树木的坐标，将数组下标在所给区间的数组元素的值赋为0，采用改变数组元素值然后统计的方式来解决区间重合问题；</li><li>step 4，在所有区间输入处理完毕之后对数组a[maxl]中1的个数进行统计，即是所求结果。</li></ul><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a><strong>AC代码：</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxl = <span class="number">10000</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> L,M,N;   </div><div class="line">    <span class="comment">//L为树的总长度，M为接下来移走树的组数，N为多点测试轮数</span></div><div class="line">    <span class="keyword">int</span> a[maxl] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="comment">//a[maxl]数组用于存储树木的状态</span></div><div class="line">    <span class="comment">// 元素为1表示该下标处有树，元素为0表示该下标处树被移走了</span></div><div class="line">    <span class="keyword">int</span> c,d,k;</div><div class="line">    <span class="comment">//c,d分别表示每组的一对数字，num[maxl]用于存储所有轮测试完成后的结果</span></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;L,&amp;M) != EOF)&#123;</div><div class="line">        <span class="keyword">if</span>(L == <span class="number">0</span> &amp;&amp; M == <span class="number">0</span>)    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="comment">//while...break；形式的多点测试方案</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= L;i++)&#123;</div><div class="line">            a[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将从0到L这L+1个点赋值为1，表示种上了树</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; M;i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;c,&amp;d);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = c;j &lt;=d;j++)&#123;</div><div class="line">                a[j] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//输入M组c,d的值，将数组a的下标在c,d之间的元素赋值为0，表示移走了树</span></div><div class="line">        k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= L;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(a[i] == <span class="number">1</span>)&#123;</div><div class="line">                k++;   </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,k);   </div><div class="line">        <span class="comment">//打印输出结果</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Codeup </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PAT-B1022-D进制的A+B</title>
      <link href="/2017/09/01/PAT-B1022-D%E8%BF%9B%E5%88%B6%E7%9A%84A+B/"/>
      <url>/2017/09/01/PAT-B1022-D%E8%BF%9B%E5%88%B6%E7%9A%84A+B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>PAT B1022 D进制的A+B </p><p>时间限制</p><p>100 ms<br>内存限制</p><p>65536 kB</p><p>输入两个非负10进制整数A和B(&lt;=2^30-1)，输出A+B的D (1 &lt; D &lt;= 10)进制数。</p><p>输入格式：<br>输入在一行中依次给出3个整数A、B和D。</p><p>输出格式：<br>输出A+B的D进制数。</p><p>输入样例：123 456 8</p><p>输出样例：1103</p><h4 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a><strong>思路分析：</strong></h4><p>对题目要求的A，B的数据区间进行分析，可知A，B和A+B都在整型数据的范围-2^31到2^31-1之内。对于整数的十进制到D进制的转换，我们常规的处理办法是对这个十进制数不断地除以D取余，直到商等于0为止，然后反向书写余数即是我们所需要的D进制数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">如：10进制的53化为2进制：</div><div class="line">被除数  D进制基数   商   余数</div><div class="line">  53  /    2   =   26 …… 1</div><div class="line">  26  /    2   =   13 …… 0</div><div class="line">  13  /    2   =    6 …… 1</div><div class="line">   6  /    2   =    3 …… 0</div><div class="line">   3  /    2   =    1 …… 1</div><div class="line">   1  /    2   =    0 …… 1</div><div class="line">最后的结果是将余数反向书写：110101</div></pre></td></tr></table></figure><p>值得注意的是，我们在手工计算的时候商和余数是同时计算出来的，但是在C/C++语言中，取余数 % 和求商 / 是两个单独的运算，为了能分别得到余数和商，我们应该先对被除数取余，存放到一个数组中备用（最后从这个数组输出结果的时候应该逆序输出），然后再对被除数进行除法运算，用它的商来代替它本身进行后续的运算，由于上述过程应该是一个对商不断除以D对其取余数的过程，所以我们需要用一个循环来简单模拟这个计算过程，这个循环的控制条件应该是直到商也就是最后的被除数为0时停止循环。考虑到一种特殊的情况，即我们要转换进制的十进制数是0的时候，这里的循环应该选用do……while循环而不用while循环，以保证循环至少运行一次，而非直接不执行循环。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a><strong>AC代码：</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> a,b,d,sum;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;d) != EOF)&#123;</div><div class="line">        sum = a + b;</div><div class="line">        <span class="keyword">int</span> z[<span class="number">31</span>],num = <span class="number">0</span>;</div><div class="line">        <span class="keyword">do</span>&#123;</div><div class="line">            <span class="comment">//十进制转化为d进制</span></div><div class="line">            z[num++] = sum % d;</div><div class="line">            <span class="comment">//z中保存的是最后的结果</span></div><div class="line">            sum /= d;</div><div class="line">        &#125;<span class="keyword">while</span>(sum != <span class="number">0</span>);</div><div class="line">        <span class="comment">//用do...while循环而不用while循环是为了考虑到sum=0的这种特殊情况</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = num - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,z[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT B level </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>《算法笔记及上机实战指南》学习笔记</title>
      <link href="/2017/08/21/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E5%8F%8A%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/08/21/%E3%80%8A%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E5%8F%8A%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近在跟着胡凡的《算法笔记》和配套的《上机训练实战指南》学习基本的算法。就是这两本。</p><p><img src="http://ou3525a1l.bkt.clouddn.com/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E5%B0%81%E9%9D%A2.jpg" alt="算法笔记"></p><p><img src="http://ou3525a1l.bkt.clouddn.com/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E5%AE%9E%E6%88%98%E8%AE%AD%E7%BB%83%E5%B0%81%E9%9D%A2.jpg" alt="上机实战训练指南"></p><p>在这里记录一下学习之中的一些心得和一些题目的解题思路，代码是C和C++的混编风格，不保证最优，欢迎指正，权当备忘，因为这个博客也并没有加入百度或者谷歌的SEO，这意味着，它不会被你在搜索引擎中搜索到，唯二能够访问这个博客的可能只是从我本人这里获取地址或者从我的<a href="https://github.com/Pumpkinor/" target="_blank" rel="external">Github</a>主页上链接过来。</p><h4 id="第二章-C-C-快速入门"><a href="#第二章-C-C-快速入门" class="headerlink" title="第二章  C/C++ 快速入门"></a>第二章  C/C++ 快速入门</h4><p>这一章是对于基础的C/C++语言语法进行简略的介绍，不作为系统性的C/C++语言学习使用，只讲述与算法竞赛，在线oj相关的语法。侧重于C语言，因为C++语法在机考中多数是用不到的。</p><ol><li>变量类型</li><li>关于数据的输入输出</li><li>用typedef给数据类型起别名</li><li>常用math.h函数</li><li>选择结构</li><li>循环结构</li><li>数组</li><li>常用string.h函数</li><li>自定义函数</li><li>函数递归</li><li>指针和引用</li><li>结构体</li><li>浮点数比较</li><li>在线oj的几种测试模式</li></ol><h4 id="第三章-入门模拟"><a href="#第三章-入门模拟" class="headerlink" title="第三章  入门模拟"></a>第三章  入门模拟</h4><p>这一章主要讲解一些简单的模拟类编程题，没有涉及复杂算法，只要“题目怎么说，你就怎么做”一般都是能够顺利做出来的，主要考察和训练个人的代码能力，对于基础代码能力的提高很有帮助。</p><p>下面给出例题和课后题的个人思考和分析，仅供参考使用。</p><h5 id="3-1-简单模拟："><a href="#3-1-简单模拟：" class="headerlink" title="3.1 简单模拟："></a>3.1 简单模拟：</h5><p>例题：</p><ol><li><a href="https://pumpkinor.github.io/2017/08/20/PAT%20B1001%20%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3/">PAT B1001 害死人不偿命的(3n+1)猜想</a></li><li><a href="https://pumpkinor.github.io/2017/08/20/PAT%20B1032%20%E6%8C%96%E6%8E%98%E6%9C%BA%E6%8A%80%E6%9C%AF%E5%93%AA%E5%AE%B6%E5%BC%BA/">PAT B1032 挖掘机技术哪家强</a></li></ol><p>练习题CodeUp 100000575：</p><ol><li><a href="https://pumpkinor.github.io/2017/09/09/Codeup%20575%20A%20%E5%89%A9%E4%B8%8B%E7%9A%84%E6%A0%91/">A 剩下的树</a></li></ol><h5 id="3-2-查找元素："><a href="#3-2-查找元素：" class="headerlink" title="3.2 查找元素："></a>3.2 查找元素：</h5><p>例题：</p><ol><li><a href="https://pumpkinor.github.io/2017/08/21/Codeup%201934%20%E6%89%BEx/">CodeUp 1934 找x</a></li></ol><h5 id="3-3-图形输出"><a href="#3-3-图形输出" class="headerlink" title="3.3 图形输出:"></a>3.3 图形输出:</h5><p>例题：</p><ol><li><a href="https://pumpkinor.github.io/2017/08/21/PAT%20B1036%20%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%BC%96%E7%A8%8B/">PAT B1036 跟奥巴马一起编程</a></li></ol><h5 id="3-4-日期处理"><a href="#3-4-日期处理" class="headerlink" title="3.4 日期处理:"></a>3.4 日期处理:</h5><p>例题：</p><ol><li><a href="https://pumpkinor.github.io/2017/08/21/Codeup%201928%20%E6%97%A5%E6%9C%9F%E5%B7%AE%E5%80%BC/">CodeUp 1928 日期差值</a></li></ol><h5 id="3-5-进制转换："><a href="#3-5-进制转换：" class="headerlink" title="3.5 进制转换："></a>3.5 进制转换：</h5><p>例题：</p><ol><li><a href="https://pumpkinor.coding.me/2017/09/01/PAT%20B1022%20D%E8%BF%9B%E5%88%B6%E7%9A%84A+B/" target="_blank" rel="external">PAT B1022 D进制的A+B</a></li></ol>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-B1036-跟奥巴马一起编程</title>
      <link href="/2017/08/21/PAT-B1036-%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%BC%96%E7%A8%8B/"/>
      <url>/2017/08/21/PAT-B1036-%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>PAT B1036 跟奥巴马一起编程</p><p>时间限制<br>400 ms<br>内存限制<br>65536 kB</p><p>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</p><p>输入格式：</p><p>输入在一行中给出正方形边长N（3=N=20）和组成正方形边的某种字符C，间隔一个空格。</p><p>输出格式：</p><p>输出由给定字符C画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的50%（四舍五入取整）。</p><p>输入样例：<br>10 a</p><p>输出样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">aaaaaaaaaa</div><div class="line">a        a</div><div class="line">a        a</div><div class="line">a        a</div><div class="line">aaaaaaaaaa</div></pre></td></tr></table></figure><h4 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h4><p>从样例输出上看一开始可能会主观地觉得每一行之间会有一个空行，但其实根据题意是没有的，由题目所给输出格式要求里我们可以抓住的点是，这个正方形的行数是列数的一半，四舍五入取整。要注意的点是，当列数col是偶数时，行数row是col/2，当列数col是奇数时，行数row是col/2+1。</p><p>根据题目要求以及分析样例规律，这个图形我们可以用很原始的办法十分简单的绘制出来：</p><ul><li>step 1，输入边长（以为准列数，行数为列数的50%）和指定字符c；</li><li>step 2，判断列数col的奇偶性，分情况确定行数row的值；</li><li>step 3，输出正方形第一行，即col个字符；</li><li>step 4，输出正方形中间的row-2行，首尾是字符c，中间是col-2个空格；</li><li>step 5，输出正方形最后一行，同step 3。</li></ul><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> row,col;</div><div class="line">  <span class="comment">//row为行数，col为列数，边长N以列数为准，即N == col</span></div><div class="line"><span class="keyword">char</span> c;</div><div class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %c"</span>,&amp;col,&amp;c) != EOF)&#123;</div><div class="line"><span class="keyword">if</span>(col % <span class="number">2</span> ==<span class="number">0</span>)</div><div class="line">          <span class="comment">//偶数情况</span></div><div class="line">row = col / <span class="number">2</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">          <span class="comment">//奇数情况</span></div><div class="line">row = col / <span class="number">2</span> +<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; col;i++)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,c);</div><div class="line">&#125;</div><div class="line">      <span class="comment">//第一行</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">      <span class="comment">//注意换行</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; row;i++)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,c);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; col<span class="number">-2</span>;j++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>,c);</div><div class="line">&#125;</div><div class="line">      <span class="comment">//中间row-2行</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; col;i++)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,c);</div><div class="line">&#125;</div><div class="line">      <span class="comment">//最后一行</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT B level </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Codeup-1928-日期差值</title>
      <link href="/2017/08/21/Codeup-1928-%E6%97%A5%E6%9C%9F%E5%B7%AE%E5%80%BC/"/>
      <url>/2017/08/21/Codeup-1928-%E6%97%A5%E6%9C%9F%E5%B7%AE%E5%80%BC/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>Codeup 1928 日期差值</p><p>时间限制 1 Sec  内存限制 32 MB</p><p>有两个日期，求两个日期之间的天数，如果两个日期是连续的我们规定他们之间的天数为两天。</p><p>输入</p><p>有多组数据，每组数据有两行，分别表示两个日期，形式为YYYYMMDD</p><p>输出</p><p>每组数据输出一行，即日期差值</p><p>样例输入</p><p>20130101<br>20130105</p><p>样例输出</p><p>5</p><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>这个题目乍一看很不好处理，因为涉及年份月份会有闰年，二月和大小月份之分，凭借计算机根据月份名称去判断一个月份的天数不是很好实现，特别是对于二月份，于是用数组直接存放平年或者闰年的每个月的天数不失为是一种使用一定存储空间来实现解决日期问题的简单办法。</p><p>用二维数组存储不同性质年份的每个月的天数，直观，简单，数组下表第一维与月份对应，第二维则表示平年或者闰年如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mouth[2][0]表示平年的二月份</div><div class="line">mouth[2][1]表示闰年的二月份</div></pre></td></tr></table></figure><p>呼应简单模拟的章节目录名，求日期差值的最简单的方式就是令小的那一个日期不断地+1，直到与较大的日期相等时为止即可统计出答案。期间要注意的是当天数d等于当前月份所拥有的天数+1时，需要将月份m+1并且重置d为1，对于年份也是如此，m等于13时，要讲年份y+1并将m置为1。</p><p>根据题目描述的具体思路就是：</p><ul><li>step 1，设立数组存放不同性质年份的每个月份的天数；</li><li>step 2，编写函数判断某年份是否为闰年，是则返回1，不是则返回0，对应数组的第二维下表，0表示的平年，1表示的闰年；</li><li>step 3，输入两个时间，比较两个时间的大小，保证t2大于t1，若t1大于t2则交换二者的值，方便后续在假设t2大于t1的情况下统一对数据进行处理，得出时间差值。</li><li>step 4，对输入的YYYYMMDD格式日期进行分割，分别给出表示年份，月份和天数的变量y，m，d；</li><li>step 5，根据简单模拟的原则在第一个日期没能达到第二个日期的时候（即，y1 &lt; y2 || m1 &lt; m2 || d1 &lt;  d2的时候)循环将第一个日期不断+1，期间注意月份和年份变化；</li><li>step 6，用变量ans（因为两个日期是连续的我们规定他们之间的天数为两天故ans初始值为1）统计循环次数即日期差值并打印输出。</li></ul><p>Code one和Code two的差别在于对年份的处理，Code one将年份作为最大的单位按照一天一天进行模拟，这是一笔很大的计算量，为了提高速度，Code two将计算量最大的年份独立出来处理，只对最后一年进行一天天的模拟，在测试数据年份相差较多时，会有明显更加优秀的表现。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">Code one：</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> mouth[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">28</span>,<span class="number">29</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;&#125;;</div><div class="line">    <span class="comment">//用数组存储每个月的天数，直观，简单</span></div><div class="line">    <span class="comment">//数组mouth[0][0]赋值为&#123;0,0&#125;，方便下标与月份对应</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> year)</span></span></div><div class="line"><span class="function"></span>&#123;   <span class="comment">//判断是否为闰年</span></div><div class="line">    <span class="comment">//即，能被4整除并且不能被100整除的年份是闰年，能被400整除的也是闰年</span></div><div class="line">    <span class="keyword">return</span>(year % <span class="number">4</span> ==<span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> t1,t2;</div><div class="line">    <span class="keyword">int</span> y1,y2,m1,m2,d1,d2;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t1,&amp;t2) != EOF)&#123;</div><div class="line">        <span class="keyword">if</span>(t1 &gt; t2)&#123;</div><div class="line">            <span class="comment">//t1如果大于t2 则交换t1 t2</span></div><div class="line">            <span class="keyword">int</span> temp;</div><div class="line">            temp = t1;</div><div class="line">            t1 = t2;</div><div class="line">            t2 = temp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        y1 = t1 / <span class="number">10000</span>;</div><div class="line">        y2 = t2 / <span class="number">10000</span>;</div><div class="line">        m1 = t1 % <span class="number">10000</span> /<span class="number">100</span>;</div><div class="line">        m2 = t2 % <span class="number">10000</span> /<span class="number">100</span>;</div><div class="line">        d1 = t1 % <span class="number">100</span>;</div><div class="line">        d2 = t2 % <span class="number">100</span>;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">        <span class="comment">//ans用于记录差值</span></div><div class="line">        <span class="keyword">while</span>(y1 &lt; y2 || m1 &lt; m2 || d1 &lt; d2)&#123;</div><div class="line">                <span class="comment">//令日期不断+1，使得最终t1能与t2一致，统计+1次数即日期插值</span></div><div class="line">            d1++;</div><div class="line">            <span class="keyword">if</span>(d1 == mouth[m1][isLeap(y1)] + <span class="number">1</span>)&#123;</div><div class="line">                m1++;</div><div class="line">                d1 = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(m1 == <span class="number">13</span>)&#123;</div><div class="line">                y1++;</div><div class="line">                m1 = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            ans++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">Code two：</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> mouth[<span class="number">13</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">28</span>,<span class="number">29</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> year)</span></span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">return</span>(year % <span class="number">4</span> ==<span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> t1,t2;</div><div class="line">    <span class="keyword">int</span> y1,y2,m1,m2,d1,d2;</div><div class="line">    <span class="keyword">int</span> temp;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t1,&amp;t2) != EOF)&#123;</div><div class="line">        <span class="keyword">if</span>(t1 &gt; t2)&#123;</div><div class="line">            temp = t1;</div><div class="line">            t1 = t2;</div><div class="line">            t2 = temp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        y1 = t1 / <span class="number">10000</span>;</div><div class="line">        y2 = t2 / <span class="number">10000</span>;</div><div class="line">        m1 = t1 % <span class="number">10000</span> /<span class="number">100</span>;</div><div class="line">        m2 = t2 % <span class="number">10000</span> /<span class="number">100</span>;</div><div class="line">        d1 = t1 % <span class="number">100</span>;</div><div class="line">        d2 = t2 % <span class="number">100</span>;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(y1 &lt; y2 - <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(isLeap(y1))</div><div class="line">                ans++;</div><div class="line">            y1++;</div><div class="line">            ans += <span class="number">365</span>;</div><div class="line">        &#125;</div><div class="line">      <span class="comment">//直接对年份进行操作，把第一个日期的年份不断+1直到与第二个年份相差1</span></div><div class="line">      <span class="comment">//期间是闰年在ans上加1再加365，不是闰年直接加365</span></div><div class="line">      <span class="comment">//相比较于Code one在年份差距较大的数据输入时可以显著加快运算速度</span></div><div class="line">        <span class="keyword">while</span>(y1 &lt; y2 ||m1 &lt; m2 || d1 &lt; d2)&#123;</div><div class="line">            d1++;</div><div class="line">            <span class="keyword">if</span>(d1 == mouth[m1][isLeap(y1)] + <span class="number">1</span>)&#123;</div><div class="line">                m1++;</div><div class="line">                d1 = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(m1 == <span class="number">13</span>)&#123;</div><div class="line">                y1++;</div><div class="line">                m1 = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            ans++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Codeup </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Codeup-1934-找x</title>
      <link href="/2017/08/21/Codeup-1934-%E6%89%BEx/"/>
      <url>/2017/08/21/Codeup-1934-%E6%89%BEx/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>Codeup 1934 找x</p><p>时间限制 1 Sec  内存限制 32 MB</p><p>题目描述</p><p>输入一个数n，然后输入n个数值各不相同，再输入一个值x，输出这个值在这个数组中的下标（从0开始，若不在数组中则输出-1）。</p><p>输入<br>测试数据有多组，输入n(1&lt;=n&lt;=200)，接着输入n个数，然后输入x。</p><p>输出<br>对于每组输入,请输出结果。</p><p>样例输入<br>4<br>1 2 3 4<br>3</p><p>样例输出</p><p>2</p><h4 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h4><p>题目要求从从n个数之中找到值等于x的数并返回其在数组中的下标，即这n个数是从0开始计数的，并且要求如果这n个数中没有等于x的数要打印输出-1。</p><p>题目整体不难，根据描述思路很清晰，即：</p><ul><li>step 1，输入n个数存放到数组a；</li><li>step 2，循环遍历比较每个数组元素与x是否相等；</li><li>step 3，当发现与x相等的数组元素时跳出循环，并且输出该元素的数组下标k；</li><li>step 4，如果遍历完整个数组之后也即k == n时仍然没有与x相等的元素，则直接打印输出-1。</li></ul><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> n,x,k,a[<span class="number">210</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">  <span class="comment">//题目要求1&lt;=n&lt;=200,故定义存放数据的数组空间要略大于200</span></div><div class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) != EOF)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">&#125;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</div><div class="line"><span class="keyword">for</span>(k = <span class="number">0</span>;k &lt; n;k++)&#123;</div><div class="line"><span class="keyword">if</span>(a[k] == x)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,k);</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(k == n)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Codeup </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PAT-B1032-挖掘机技术哪家强</title>
      <link href="/2017/08/20/PAT-B1032-%E6%8C%96%E6%8E%98%E6%9C%BA%E6%8A%80%E6%9C%AF%E5%93%AA%E5%AE%B6%E5%BC%BA/"/>
      <url>/2017/08/20/PAT-B1032-%E6%8C%96%E6%8E%98%E6%9C%BA%E6%8A%80%E6%9C%AF%E5%93%AA%E5%AE%B6%E5%BC%BA/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>PAT B1032 挖掘机技术哪家强</p><p>时间限制<br>200 ms<br>内存限制<br>65536 kB</p><p>为了用事实说明挖掘机技术到底哪家强，PAT组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p><p>输入格式：</p><p>输入在第1行给出不超过10的5次方的正整数N，即参赛人数。随后N行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从1开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。</p><p>输出格式：</p><p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。 </p><p>输入样例：<br>6<br>3 65<br>2 80<br>1 100<br>2 70<br>3 40<br>3 0</p><p>输出样例：</p><p>2 150</p><h4 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h4><p>根据题目描述，我们可以知道输入的参数是参赛选手的学校编号和所得分数，不保证也不排除一个学校只派出一名参赛者，即一所学校的总分是由一名或者多名选手的得分之和组成。求获得总分最高的学校：</p><ul><li>step 1，建立一个数组school[MAXSIZE]用于存放每个学校的总分，如数组元素school[1]就是编号为1的学校的总分，数组初始值赋为0；</li><li>step 2，用SchId表示选手的学校编号，SchCore表示该选手对应的成绩；</li><li>step 3，每次输入一个SchId和SchCore，在对应数组位school[SchId]上加上SchCore；</li><li>step 4，在输入完所有的选手学校编号和得分信息之后，school数组中存放的就是每个学校最后的总分了，当然，由于学校编号是从1开始的school[0]存放的数据是初始值0，没有意义；</li><li>step 5，遍历school数组，找出其中最大的元素赋值给maxCore和对应的数组下标即学校编号赋值给num然后打印输出。</li></ul><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXSIZE = <span class="number">100010</span>;</div><div class="line"><span class="keyword">int</span> school[MAXSIZE] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> n,num = <span class="number">0</span>,maxCore = <span class="number">0</span>;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"><span class="keyword">int</span> SchId,SchCore;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;<span class="comment">//i从0到n-1，一共输入n个参赛者信息 </span></div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;SchId,&amp;SchCore);</div><div class="line">school[SchId] += SchCore;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</div><div class="line">    <span class="comment">//学校编号SchId是从1开始的，n个参赛者最多可能来自n个学校，需要比较的学校编号应该是1到n </span></div><div class="line"><span class="keyword">if</span>(school[i] &gt;= maxCore)&#123;</div><div class="line">num = i;</div><div class="line">maxCore = school[num];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>,num,maxCore);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT B level </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>PAT-B1001-害死人不偿命的3n+1猜想</title>
      <link href="/2017/08/20/PAT-B1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%843n+1%E7%8C%9C%E6%83%B3/"/>
      <url>/2017/08/20/PAT-B1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%843n+1%E7%8C%9C%E6%83%B3/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>PAT B1001 害死人不偿命的3n+1猜想 (15)</p><p>时间限制<br>400 ms<br>内存限制<br>65536 kB</p><p>卡拉兹(Callatz)猜想：</p><p>对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证3n+1，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？</p><p>输入格式：</p><p>每个测试输入包含1个测试用例，即给出自然数n的值。</p><p>输出格式：</p><p>输出从n计算到1需要的步数。</p><p>输入样例：<br>3</p><p>输出样例：</p><p>5</p><h4 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h4><p>这是个简单的题目，只要根据题目描述，一步一步将描述信息转化为代码实现即可。</p><ul><li>step 1，输入一个自然数n；</li><li>step 2，判断自然数n是奇数还是偶数；</li><li>step 3，对判断为偶数的情况进行除以2操作；</li><li>step 4，对判断为基数的情况下进行(3*n+1)/2操作；</li><li>step 5，不断重复step 3和step 4，直到n等于1为止；</li><li>step 6，打印用于统计次数的变量。</li></ul><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> n,step=<span class="number">0</span>;</div><div class="line"><span class="comment">//step用于统计操作次数</span></div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"><span class="keyword">while</span>(n!=<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">      <span class="comment">//当n不为1时执行循环</span></div><div class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">n=n/<span class="number">2</span>;</div><div class="line">      <span class="comment">//n为偶数的情况</span></div><div class="line"><span class="keyword">else</span></div><div class="line">n=(<span class="number">3</span>*n+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">      <span class="comment">//n为基数的情况</span></div><div class="line">step++;</div><div class="line">      <span class="comment">//每执行一次操作step加1</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,step);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>也看了一些其他的文章和代码，对于这个简单的题目其实也还是有很多可供改进的点，比如说用n&amp;1来判断奇偶性，然后无论n是奇数还是偶数都要除以2可以写到一起，提高代码简介度，也并不影响代码可读性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(n != <span class="number">1</span>)&#123;  </div><div class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>)  </div><div class="line">            n = <span class="number">3</span>*n + <span class="number">1</span>;  </div><div class="line">        n /= <span class="number">2</span>;  </div><div class="line">        ans ++;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT B level </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>在Github和Coding上用Hexo部署自己的静态博客</title>
      <link href="/2017/08/03/%E5%9C%A8Github%E5%92%8CCoding%E4%B8%8A%E7%94%A8Hexo%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/08/03/%E5%9C%A8Github%E5%92%8CCoding%E4%B8%8A%E7%94%A8Hexo%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>​    现在你所访问的这个博客就是基于Github的静态页面服务利用Hexo框架所假设的博客。</p><p>​    如果你目的明确，只是为了在短时间内搭建一个博客网站，<a href="https://portablehexo.bitmoe.cn/" target="_blank" rel="external">Hexo Portable</a>很适合你。        <img src="http://ou3525a1l.bkt.clouddn.com/hexo%20portable.png" alt="Hexo Portable"></p><p><img src="http://ou3525a1l.bkt.clouddn.com/hexo%20portable2.png" alt="Hexo Portable2"></p><p>​    如果你只是漫漫长夜百无聊赖，请看下面的完整版本。以windows系统下的操作为例，其他操作系统可自行对比（除了软件安装没啥区别）。</p><p>​    Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。下面，来具体介绍一下相关的配置和使用，以windows系统为例：</p><p>​    首先，是Hexo在本地的安装操作。</p><p>​    step1：我们需要在电脑上下载并安装<a href="http://nodejs.cn/download/" target="_blank" rel="external">Node.js</a>和<a href="https://git-scm.com/download/win" target="_blank" rel="external">Git Bash</a>（点击链接跳转下载页面）两个软件，无需改动任何设置，默认安装即可（如果你之前已经有Git了，可能在安装Node.js后需要重启机器，如果你之前没有Git，请参考我另外的博文事先配置Git）</p><p>​    step2：在电脑中新建一个文件夹用于架设博客（如：E:\Blog文件夹），Hexo框架和你今后所写的博文还有编译以后的静态页面都会存放在这个文件夹里。使用cd命令进入这个你所建立的文件夹，或者直接在那个文件夹里右键然后点击Git Bush Here</p><p><img src="http://ou3525a1l.bkt.clouddn.com/hexoguidecd%20derectory.png" alt="open git here"></p><p>​    step3：安装 Hexo : $ npm install -g hexo</p><p>​    <img src="http://ou3525a1l.bkt.clouddn.com/hexoguidenpmhexo.png" alt=" install hexo"></p><p>​    step4：安装Hexo所需依赖包: $ npm install</p><p>​    <img src="http://ou3525a1l.bkt.clouddn.com/hexoguidenpminstall.png" alt="npm install"></p><p>​    step5：初始化Hexo: $ hexo init        </p><p>​    到这里，Hexo的本地安装就已经完成了。下面介绍Github相关操作。</p><p>​    step1：注册GitHub账号（这里就不赘述了）</p><p>​    step2：新建一个和自己GitHub仓库，名字必须为你的GitHub用户名.github.io（如我的就是<strong>Pumpkinor.github.io</strong>）    <img src="http://ou3525a1l.bkt.clouddn.com/hexoguidegithub.io.png" alt="build repository"></p><p>​    step3：生成本地电脑的公钥私钥 : $ ssh-keygen -t rsa -C “你的邮件地址”，后续可以不输入任何参数直接一路回车下去（关于ssh生成的密钥相关问题这里不予说明）</p><p>​    <img src="http://ou3525a1l.bkt.clouddn.com/hexoguidegenrsa.png" alt="make rsakey"></p><p>​    step4：找到你的公钥文件，默认是id_rsa.pub，如果你修改过，请认准.pub文件，用记事本打开，全选并复制到剪贴板</p><p><img src="http://ou3525a1l.bkt.clouddn.com/hexoguidersa.pub.png" alt="find rsa.pub"></p><p>​    step5：登录 Github，选择右上角头像 -&gt; Settings —&gt; SSH and GPG keys —&gt; New SSH key。把公钥粘贴到key中，填好title并点击 Add SSH key</p><p><img src="http://ou3525a1l.bkt.clouddn.com/hexoguideadd%20ssh%201.png" alt="add ssh key1"></p><p><img src="http://ou3525a1l.bkt.clouddn.com/hexoguideadd%20ssh%202.png" alt="add ssh key2"></p><p>​    step6：使用SSH链接本地电脑主机与GitHub: $ ssh -T git@github.com</p><p>​    此时，Hexo安装与Github端配置已经完成，Hexo的目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml网站的配置信息，您可以在此配置大部分的参数。</div><div class="line">├── package.json应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</div><div class="line">├── scaffolds模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</div><div class="line">├── source资源文件夹是存放用户资源的地方。</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes主题文件夹。Hexo 会根据主题来生成静态页面。</div></pre></td></tr></table></figure><p>​    下面介绍Hexo的使用。</p><p>​    1.查看Hexo版本: $ hexo version</p><p>​    2.初始化用于架设博客的文件夹: $ hexo init</p><p>​    3.修改_config.yml文件来个性化自己的博客，以及将博客部署到GitHub，重点在于修改带中文注释部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site站点信息</div><div class="line">title: Pumpkinor        #网站主标题</div><div class="line">subtitle: Learning and Coding for Order.of.the.Phoenix  #子标题</div><div class="line">description:                #网站介绍</div><div class="line">author: Pumpkinor       #网站拥有者</div><div class="line">language: zh-CN         #网站语言种类</div><div class="line">timezone:Asia/Shanghai  #时区</div><div class="line"></div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: https://pumpkinor.github.io    #用于绑定域名，没有独立域名就直接绑定刚新建的GitHub仓库名</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md # File name of new posts</div><div class="line">default_layout: post</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: true#当你需要使用本地图片的时候需要把这里改成true</div><div class="line">relative_link: false</div><div class="line">future: true</div><div class="line">highlight:  #语法高亮</div><div class="line">  enable: true</div><div class="line">  line_number: true #显示行号</div><div class="line">  auto_detect: </div><div class="line">  tab_replace:</div><div class="line">  </div><div class="line"># Home page setting</div><div class="line"># path: Root path for your blogs index page. (default = &apos;&apos;)</div><div class="line"># per_page: Posts displayed per page. (0 = disable pagination)</div><div class="line"># order_by: Posts order. (Order by date descending by default)</div><div class="line">index_generator:</div><div class="line">  path: &apos;&apos;</div><div class="line">  per_page: 10</div><div class="line">  order_by: -date</div><div class="line">  </div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized     #默认分类</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Date / Time format</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination#分页</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10    #每页文章数, 设置成 0 禁用分页</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: maupassant     #主题名,将主题文件下载到themes文件夹后修改此处的主题名即可给博客更换主题</div><div class="line"></div><div class="line"># Deployment部署, 发布在 GitHub和coding</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:#这一步将绑定Github仓库</div><div class="line">  type: git</div><div class="line">  repo: </div><div class="line">        github: git@github.com:Pumpkinor/Pumpkinor.github.io</div><div class="line">        coding: git@git.coding.net:pumpkinor/pumpkinor.git</div><div class="line"># add math </div><div class="line">mathjax: true</div><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">#站点配置文件新增字段 since</div><div class="line">since: 2018</div></pre></td></tr></table></figure><p>​    部署博客到GitHub的地址，如 ：github: git@github.com:Pumpkinor/Pumpkinor.github.io可以从下图位置复制</p><p><img src="http://ou3525a1l.bkt.clouddn.com/hexoguidedpssh.png" alt="dpssh"></p><p>​    4.在本地新建博文: $ hexo new “postName”  ，新建的博文处于_posts文件夹下</p><p>​    5.Hexo的博文需要使用markdown语言进行书写<img src="http://ou3525a1l.bkt.clouddn.com/hexoguidemarkdownblog.png" alt="markdownblog"></p><p>​    关于文章插图问题，可以使用七牛云的对象存储功能，也可以使用本地插图，个人倾向于本地插图，本地插图需要安装一个插入图片的插件，在用于架设博客的文件夹里使用: $ npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">https://github.com/CodeFalling/hexo-asset-image</a> –save安装这个插件即可。安装了这个插件且将配置文件中的post_asset_folder:写为true之后，新建博文的时候会生成一个postName.md文件和一个postName文件夹，将图片存到该文件夹，使用时插入文档即可（如果使用Typora可以直接把图片文件拖到里面）</p><p>​    6.当你写好你的博文之后，使用: $ hexo generate或者 hexo g来将你书写的markdown文档生成为静态html文件</p><p>​    7.生产完毕之后使用: $ hexo server或 hexo s启动本地服务器，然后打开浏览器输入localhost:4000可以预览博客效果，用于上传之前的效果测试</p><p>​    8.效果测试满意之后，使用: $ hexo deploy或者hexo d来上传你的博客到GitHub</p><p>​    9.当然，如果不需要事先查看页面效果，可以直接使用: $ hexo d -g生成并上传博客到Github</p><p>​    嗯 基本就是这些，其他的回头想起来再说</p><p>​    </p>]]></content>
      
      <categories>
          
          <category> Configuration Tutorial </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Some Classical Sorting Methods </title>
      <link href="/2017/07/29/Some-Classical-Sorting-Methods-3/"/>
      <url>/2017/07/29/Some-Classical-Sorting-Methods-3/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><ol><li><p>冒泡排序</p><p>冒泡排序的实质在于交换，即多次通过比较数组相邻元素，把其中最大的一个元素移动到最右边的位置放置不管，再在剩余元素中进行同样的操作，直到剩余元素为0为止。</p><p>具体比较方式如下：</p><p>从a[0]与a[1]比较到a[n-2]与a[n-1]并将二者之间较大的元素放到右边位置，这样一次操作称之为一轮冒泡，此时数组最右边元素a[n-1]就是整个数组元素中最大的那一个。</p><p>第2轮则是从a[0]与a[1]比较到a[n-3]与a[n-2]并将二者之间较大的元素放到右边位置，由于已知a[n-1]是整个数组元素中最大的那一个，故不需要再重复比较a[n-2]和a[n-1]的大小，此时数组元素a[n-2]就是整个数组元素中第二大的那一个。</p><p>第3轮则是从a[0]与a[1]比较到a[n-4]与a[n-3]并将二者之间较大的元素放到右边位置。</p><p>……</p><p>依此类推。</p><p>第n-2轮则是从a[0]与a[1]比较到a[1]与a[2]。</p><p>第n-1轮则仅比较且交换a[0]与a[1]，至此，冒泡结束。数组已经完成了从小到大的排序。</p><p>由上述描述可以看出来，冒泡排序是时间复杂度为n^2的排序算法。</p><p>例如：    对a[5]={6,5,2,1,3}进行冒泡排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">第1轮：</div><div class="line">1.a[0]和a[1]进行比较并交换a[5]=&#123;5,6,2,1,3&#125;</div><div class="line">2.a[1]和a[2]进行比较并交换a[5]=&#123;5,2,6,1,3&#125;</div><div class="line">3.a[2]和a[3]进行比较并交换a[5]=&#123;5,2,1,6,3&#125;</div><div class="line">4.a[3]和a[4]进行比较并交换a[5]=&#123;5,2,1,3,6&#125;</div><div class="line">第2轮：</div><div class="line">1.a[0]和a[1]进行比较并交换a[5]=&#123;2,5,1,3,6&#125;</div><div class="line">2.a[1]和a[2]进行比较并交换a[5]=&#123;2,1,5,3,6&#125;</div><div class="line">3.a[2]和a[3]进行比较并交换a[5]=&#123;2,1,3,5,6&#125;</div><div class="line">第3轮：</div><div class="line">1.a[0]和a[1]进行比较并交换a[5]=&#123;1,2,3,5,6&#125;</div><div class="line">2.a[1]和a[2]进行比较并交换a[5]=&#123;1,2,3,5,6&#125;</div><div class="line">第4轮：</div><div class="line">1.a[0]和a[1]进行比较并交换a[5]=&#123;1,2,3,5,6&#125;</div></pre></td></tr></table></figure><p>C语言实现代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> a[<span class="number">5</span>]=&#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125; ;</div><div class="line"><span class="comment">//i表示排序进行轮数，一共需进行n-1轮冒泡排序 </span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)&#123;</div><div class="line"><span class="comment">//第i轮排序时，从a[0]到a[n-1-i]都与他们的下一个元素进行比较</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>-i; j++)&#123;</div><div class="line"><span class="comment">//若a[j]&gt;a[j+1]则进行交换元素 否则则保持不变 </span></div><div class="line"><span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</div><div class="line"><span class="keyword">int</span> temp = a[j];</div><div class="line">a[j] = a[j+<span class="number">1</span>];</div><div class="line">a[j+<span class="number">1</span>] = temp;</div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>插入排序</p></li><li><p>选择排序</p><p>选择排序，顾名思义就是从一个序列中，选出最小的那个元素，把它放到最前面的位置，再从剩下的元素中选出最小的元素放到剩余元素的最前面的位置，以此类推下去。</p><p>具体比较方式如下：</p><p>第一次比较是从a[0]到a[n-1]这n个元素中找出最小的那个元素a[minIndex]，将其与a[0]交换位置；</p><p>第二次比较是从a[1]到a[n-1]这n-1个元素中找出最小的那个元素a[minIndex]，将其与a[1]交换位置；</p><p>以此类推，</p><p>到第n-1次比较是从a[n-2]到a[n-1]这两个元素中找出最小的那个元素a[minIndex]，将其与a[n-2]交换位置；</p><p>由上述描述可以看出来，选择排序是时间复杂度为n^2的排序算法。</p><p>例如：    对a[5]={6,5,2,1,3}进行选择排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(我们使用小括号来表示每次选择的范围)</div><div class="line">第1轮：</div><div class="line">从a[0]到a[4]中找到最小值并交换和a[0]的位置a[5]=&#123;(1,2,5,3,6)&#125;</div><div class="line">第2轮：</div><div class="line">从a[1]到a[4]中找到最小值并交换和a[1]的位置a[5]=&#123;1,(2,5,3,6)&#125;</div><div class="line">第3轮：</div><div class="line">从a[2]到a[4]中找到最小值并交换和a[2]的位置a[5]=&#123;1,2,(3,5,6)&#125;</div><div class="line">第4轮：</div><div class="line">从a[3]到a[4]中找到最小值并交换和a[3]的位置a[5]=&#123;1,2,3,(5,6)&#125;</div><div class="line">第五轮：（其实这一轮比较没有必要，但是为了程序实现方便一般是会执行这一步的）</div><div class="line">从a[4]到a[4]中找到最小值并交换和a[4]的位置a[5]=&#123;1,2,3,5,(6)&#125;</div></pre></td></tr></table></figure><p>C语言实现代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> a[<span class="number">5</span>]=&#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125; ;</div><div class="line">  <span class="keyword">int</span> minIndex;</div><div class="line"><span class="comment">//i是选择交换操作的执行次数，用于表示选择范围的起始位置 </span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line"><span class="comment">//第i轮排序时，从a[i]到a[n-1]中找到最小值并交换和a[i]的位置</span></div><div class="line">      <span class="comment">//定义最小值索引，用于标识从a[i]到a[n-1]中找到最小值</span></div><div class="line">         minIndex = i;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; <span class="number">5</span>; j++)&#123;</div><div class="line">          <span class="comment">//若a[j]&gt;a[j+1]则进行交换元素 否则则保持不变 </span></div><div class="line"><span class="keyword">if</span>(a[j]&lt;a[minIndex])&#123;</div><div class="line">             minIndex = j;</div><div class="line">&#125; </div><div class="line">          <span class="comment">//在选择范围内交换剩余数组最小值和第一个位置的值</span></div><div class="line">           <span class="keyword">int</span> temp = a[i];</div><div class="line">a[i] = a[minIndex];</div><div class="line">a[minIndex] = temp;</div><div class="line">&#125; </div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>心血来潮写了用递归写了一遍，感觉毫无优势，甚至增加了空间复杂度，就只是用递归代替了外层循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">slectionsort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(i &gt;= n)</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="comment">//i是选择交换操作的执行次数，用于表示选择范围的起始位置 </span></div><div class="line"><span class="comment">//定义最小值索引，用于标识从a[i]到a[n-1]中找到最小值</span></div><div class="line">    <span class="keyword">int</span> minIndex = i;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++)&#123;</div><div class="line">        <span class="comment">//若a[j]&gt;a[j+1]则进行交换元素 否则则保持不变 </span></div><div class="line"><span class="keyword">if</span>(a[j]&lt;a[minIndex])</div><div class="line">            minIndex = j; </div><div class="line">          <span class="comment">//在选择范围内交换剩余数组最小值和第一个位置的值</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> temp = a[i];</div><div class="line">    a[i] = a[minIndex];</div><div class="line">    a[minIndex] = temp;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</div><div class="line">    i++;</div><div class="line">    slectionsort(a,i,n);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> a[<span class="number">5</span>]=&#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</div><div class="line">slectionsort(a,<span class="number">0</span>,<span class="number">5</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>快速排序</p></li><li><p>希尔排序</p></li><li><p>堆排序</p><p>​</p></li></ol>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
